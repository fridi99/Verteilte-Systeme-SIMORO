/*
 * Metering Point API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using MongoDB.Bson;
using MongoDB.Driver;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MeteringPointsApiController : ControllerBase
    { 
        private static IMongoCollection<BsonDocument> _mongoCollection = null!;
        /// <summary>
        /// Create Metering Point
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="404">Not Found Error</response>
        /// <response code="422">Validation Error</response>
        [HttpPost]
        [Route("/metering_points")]
        [ValidateModelState]
        [SwaggerOperation("CreateMeteringPointMeteringPointsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeteringPoint), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult CreateMeteringPointMeteringPointsPost([FromBody]MeteringPoint body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MeteringPoint));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            var mongoClient = new MongoClient("mongodb://root:password@localhost:27017");

            var database = mongoClient.GetDatabase("my_database");

            database.GetCollection<BsonDocument>("meteringPoints");
            _mongoCollection = database.GetCollection<BsonDocument>("meteringPoints");
            
            var filter = Builders<BsonDocument>.Filter.Eq("MeteringPointNumber", "id_");
            var result = _mongoCollection.DeleteOne(filter);
            if (result.DeletedCount == 0)
            {
                return StatusCode(404, "Metering point not found");
            }

            return StatusCode(200);
        }

        /// <summary>
        /// Delete Metering Point
        /// </summary>
        /// <param name="id_"></param>
        /// <response code="204">Successful Response</response>
        /// <response code="404">Not Found Error</response>
        /// <response code="422">Validation Error</response>
        [HttpDelete]
        [Route("/metering_points/{id_}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteMeteringPointMeteringPointsIdDelete")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult DeleteMeteringPointMeteringPointsIdDelete([FromRoute][Required]Object id_)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Metering Point
        /// </summary>
        /// <param name="id_"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="404">Not Found Error</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/metering_points/{id_}")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringPointMeteringPointsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeteringPoint), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetMeteringPointMeteringPointsIdGet([FromRoute][Required]Object id_)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MeteringPoint));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            
            
            var mongoClient = new MongoClient("mongodb://root:password@localhost:27017");

            var database = mongoClient.GetDatabase("my_database");

            database.GetCollection<BsonDocument>("meteringPoints");
            _mongoCollection = database.GetCollection<BsonDocument>("meteringPoints");
            foreach (var meteringPoint in _mongoCollection.AsQueryable())
            {
                if (meteringPoint["meteringPointNumber"].ToString() == id_)
                {
                    return new ObjectResult(meteringPoint);
                }
            }
                return StatusCode(404);

        }

        /// <summary>
        /// Get Metering Points
        /// </summary>
        /// <response code="200">Successful Response</response>
        [HttpGet]
        [Route("metering_points")]
        [ValidateModelState]
        [SwaggerOperation("GetMeteringPointsMeteringPointsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successful Response")]
        public virtual IActionResult GetMeteringPointsMeteringPointsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            var mongoClient = new MongoClient("mongodb://root:password@localhost:27017");

            var database = mongoClient.GetDatabase("my_database");

            database.GetCollection<BsonDocument>("meteringPoints");
            _mongoCollection = database.GetCollection<BsonDocument>("meteringPoints");
            List<string> id_list = new List<string>();
            foreach (var meteringPoint in _mongoCollection.AsQueryable())
            {
                id_list.Add(meteringPoint["meteringPointNumber"].ToString());
            }

            if (id_list.Count == 0)
            {
                return StatusCode(404);
            }
            return new ObjectResult(id_list);
        }

        /// <summary>
        /// Update Metering Point
        /// </summary>
        /// <param name="id_"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="404">Not Found Error</response>
        /// <response code="422">Validation Error</response>
        [HttpPut]
        [Route("/metering_points/{id_}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateMeteringPointMeteringPointsIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeteringPoint), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult UpdateMeteringPointMeteringPointsIdPut([FromRoute][Required]Object id_)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MeteringPoint));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : \"\",\n  \"meteringPointNumber\" : \"\",\n  \"name\" : \"\",\n  \"description\" : \"\",\n  \"id\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MeteringPoint>(exampleJson)
                        : default(MeteringPoint);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
