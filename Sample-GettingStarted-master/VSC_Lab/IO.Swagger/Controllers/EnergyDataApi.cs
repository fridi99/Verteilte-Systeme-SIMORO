/*
 * Metering Point API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnergyDataApiController : ControllerBase
    { 
        /// <summary>
        /// Get most recent Energy Data Entry
        /// </summary>
        /// <param name="id_"></param>
        /// <response code="200">Successful Response</response>
        /// <response code="404">Not Found Error</response>
        /// <response code="422">Validation Error</response>
        [HttpGet]
        [Route("/metering_points/{id_}/energy_data")]
        [ValidateModelState]
        [SwaggerOperation("GetEnergyDataEntryEnergyDataIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(EnergyData), description: "Successful Response")]
        [SwaggerResponse(statusCode: 422, type: typeof(HTTPValidationError), description: "Validation Error")]
        public virtual IActionResult GetEnergyDataEntryEnergyDataIdGet([FromRoute][Required]Object id_)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EnergyData));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(HTTPValidationError));
            string exampleJson = null;
            exampleJson = "{\n  \"operationStatus\" : \"\",\n  \"meteringPointNumber\" : \"\",\n  \"meterReading\" : \"\",\n  \"timestamp\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EnergyData>(exampleJson)
                        : default(EnergyData);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
